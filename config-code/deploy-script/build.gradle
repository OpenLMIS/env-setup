apply plugin : 'java'
apply plugin: 'cargo'

import groovy.sql.Sql

def env               = System.getenv()
// WAR related config loaded from Environment Var
def warSourceUrl      = env['LMIS_WAR_SOURCE_URL']
def warDestination    = env['LMIS_WAR_DESTINATION']
def serverHome        = env['LMIS_SERVER_HOME']
def serverName        = env['LMIS_SERVER_NAME']
def serverPort        = env['LMIS_SERVER_PORT']
// DB related config loaded from Environment Var
def dbName            = env['LMIS_DB_NAME']
def dbUser            = env['LMIS_DB_USER']
def dbPassword        = env['LMIS_DB_PASSWORD']
def databaseHostName  = env['LMIS_DB_HOSTNAME']
def databasePort      = env['LMIS_DB_PORT']
def dbJarSourceUrl    = env['LMIS_DB_JAR_URL']
def dbJarDestination  = env['LMIS_DB_JAR_DESTINATION']

task env_check << {
  println "LMIS_WAR_SOURCE_URL: $warSourceUrl"
  println "LMIS_WAR_DESTINATION: $warDestination"
  println "LMIS_SERVER_HOME: $serverHome"
  println "LMIS_SERVER_NAME: $serverName"
  println "LMIS_SERVER_PORT: $serverPort"
  println "LMIS_DB_NAME: $dbName"
  println "LMIS_DB_USER: $dbUser"
  println "LMIS_DB_PASSWORD: $dbPassword"
  println "LMIS_DB_HOSTNAME: $databaseHostName"
  println "LMIS_DB_PORT: $databasePort"
  println "LMIS_DB_JAR_URL: $dbJarSourceUrl"
  println "LMIS_DB_JAR_DESTINATION: $dbJarDestination"
}

configurations {
  flyway
  classpath
}


repositories {
  mavenCentral()
}



buildscript {
  repositories {
      add(new org.apache.ivy.plugins.resolver.URLResolver()) {
          name = 'GitHub'
          addArtifactPattern 'http://cloud.github.com/downloads/[organisation]/[module]/[module]-[revision].[ext]'
      }
  }

  dependencies {
      classpath 'bmuschko:gradle-cargo-plugin:0.5.6'
  }
}


dependencies {
  compile "com.googlecode.flyway:flyway-core:1.7"
  compile "com.googlecode.flyway:flyway-ant:1.7"
  compile "postgresql:postgresql:9.1-901.jdbc4"
  compile "c3p0:c3p0:0.9.0.4"
  flyway "com.googlecode.flyway:flyway-ant:1.7"
  flyway "postgresql:postgresql:9.1-901.jdbc4"
  classpath 'postgresql:postgresql:9.1-901.jdbc4'
  flyway files("$dbJarDestination/$dbJarName")
  cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion",
          "org.codehaus.cargo:cargo-ant:$cargoVersion"
}


cargo {
  containerId = serverName
  port = Integer.valueOf(serverPort)
  deployable {
      file = file(warDestination + File.separator + warName)
  }

  local {
      homeDir = file(serverHome)
      output = file(serverLogFile)
  }
}


task deployOpenLmis(dependsOn: "setupDB") << {
  println("Deploying...")
  //  cargoStopLocal.execute()  // when it works, stop goes from ci
  tasks.migrateDB.execute()
  tasks.seed.execute()

  tasks.cleanTomcatWorkCache.execute()
  tasks.downloadFile.execute()
  //  cargoRunLocal.execute()   // when it works start goes from ci
}

task cleanTomcatWorkCache << {
  def workDir   = new File("${serverHome}work/Catalina/localhost/openlmis-web")
  def webappDir = new File("${serverHome}webapps/openlmis-web")

  println "Removing..... ${serverHome}work/Catalina/localhost/openlmis-web"
  def delWorkDir    = workDir.deleteDir()
  println "Removing..... ${serverHome}webapps/openlmis-web"
  def delWebappDir  = webappDir.deleteDir()

  assert delWorkDir && delWebappDir
  assert !workDir.exists() && !webappDir.exists()
}


task downloadFile << {
  println("Downloading war...")
  ant.get(src: warSourceUrl.replace('buildVersion', buildVersion) + warName, dest: warDestination, verbose: 'true')
  println("Downloaded")

}

task setupDB(dependsOn: ["createDB",clean]) << {
  ext.flyway_classpath = files(configurations.flyway)
  ant.taskdef(name: 'flywayInit', classname: 'com.googlecode.flyway.ant.InitTask', classpath: ext.flyway_classpath.asPath)
  ant.flywayInit(driver: 'org.postgresql.Driver', url: 'jdbc:postgresql:' + dbName, user: dbUser, password: dbPassword)
}

task createDB(dependsOn: "dropDB") << {
  println("Creating Database..")
  executeSql('create database ' + dbName)
}

task dropDB() << {
  println("Dropping Datbase..")
  executeSql('drop database if exists ' + dbName)
}

def executeSql(String statement) {
  configurations.classpath.each { file ->
    gradle.class.classLoader.addURL(file.toURI().toURL())
  }

  /*
   gotta remove this duplication
  */
  def env        = System.getenv()
  // WAR related config loaded from Environment Var
  def warSourceUrl      = env['LMIS_WAR_SOURCE_URL']
  def warDestination    = env['LMIS_WAR_DESTINATION']
  def serverHome        = env['LMIS_SERVER_HOME']
  def serverName        = env['LMIS_SERVER_NAME']
  def serverPort        = env['LMIS_SERVER_PORT']
  // DB related config loaded from Environment Var
  def dbName            = env['LMIS_DB_NAME']
  def dbUser            = env['LMIS_DB_USER']
  def dbPassword        = env['LMIS_DB_PASSWORD']
  def databaseHostName  = env['LMIS_DB_HOSTNAME']
  def databasePort      = env['LMIS_DB_PORT']
  def dbJarSourceUrl    = env['LMIS_DB_JAR_URL']
  def dbJarDestination  = env['LMIS_DB_JAR_DESTINATION']

  driverName = 'org.postgresql.Driver'
  Class.forName(driverName)
  Sql sql = (Sql) Sql.newInstance(
          "jdbc:postgresql://$databaseHostName:$databasePort" ,
          dbUser,
          dbPassword,
          driverName
  )

  println "Terminating all open connections to ${dbName}"
  sql.execute("select pg_terminate_backend(procpid) from pg_stat_activity where datname='" + dbName + "'")

  println "Exec SQL: ${statement}"
  sql.execute statement
}

task migrateDB() << {
  println("Migrating database...")
  ant.get(src: dbJarSourceUrl.replace('buildVersion', buildVersion) + dbJarName, dest: dbJarDestination, verbose: 'true')
  ext.flyway_classpath = files(sourceSets.main.resources.srcDirs) + files(configurations.flyway)
  ant.taskdef(name: 'flywayMigrate', classname: 'com.googlecode.flyway.ant.MigrateTask', classpath: ext.flyway_classpath.asPath)
  ant.flywayMigrate(driver: 'org.postgresql.Driver', url: "jdbc:postgresql://$databaseHostName:$databasePort/$dbName" , user: dbUser, password: dbPassword)
}

task seed(type: Exec) {
    environment("PGPASSWORD", dbPassword)
    println("setting up seed data..")
    commandLine 'psql', '-U', dbUser, '--file', seedDir+'/seed.sql', '-w', dbName
}
